getwd()
setwd("C:/Users/Admin/Documents")
getwd()
devtools::create("anyFit")
setwd("C:/Users/Admin/Documents/KNMI_example")
devtools::create("anyFit")
here::
install.packages("here")
here::dr_here()
setwd("C:/Users/Admin/Documents")
devtools::create("anyFit")
setwd("C:/Users/Admin/Documents/anyFit")
devtools::document()
devtools::use_vignette("Introduction")
install.packages("usethat")
usethis::use_vignette("Introduction")
devtools::install()
devtools::install()
?delim2xts
devtools::document()
devtools::install()
?delim2xts
?delim2xts
devtools::document()
devtools::install()
?delim2xts
?delim2xts
devtools::install()
?delim2xts
anyFit::delim2xts()
library(anyFit)
?delim2xts
devtools::document()
devtools::install()
library(anyFit)
?delim2xts
library(anyFit)
?delim2xts
devtools::document()
library(anyFit)
?aggregate_xts
git config --global user.email "gapouliasis@gmail.com"
devtools::document()
devtools::document()
usethis::use_tidy_description()
usethis::use_tidy_dependencies()
renv::dependencies()
install.packages()
install.packages("renv")
renv::dependencies()
a=renv::dependencies()
b = unique(a$Package)
usethis::use_package(b)
b[1]
for (i in 1:39){usethis::use_package(b[i])}
b
for (i in 28:39){usethis::use_package(b[i])}
devtools::document()
?Exponential
file_path_nc <- system.file("extdata", "rr_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", package = "anyFit")
varname = "rr"
country = "Belgium"
nc_data = ncdf4::nc_open(filename = filename)
library(anyFit)
filename = file_path_nc
nc_data = ncdf4::nc_open(filename = filename)
nc_brick = raster::brick(filename, varname = varname, level = 1)
#world_data = readRDS("data/world_data.rds")
if (!is.na(country)){
countries = world_data$name
if (country %in% countries){
mask = subset(world_data, name==country)
r2 <- raster::crop(nc_brick, raster::extent(mask))
r3 <- raster::mask(r2, mask = mask)
}else{
stop("Country name is incorrect")
}
}else if(!is.na(continent)){
continents = world_data$continent
if (continent %in% continents){
mask = subset(world_data, continent==continent)
r2 <- raster::crop(nc_brick, raster::extent(mask))
r3 <- raster::mask(r2, mask = mask)
}else{
stop("Continent name is incorrect")
}
}else if(!is.na(continent)){
mask = rgdal::readOGR(shapefile)
r2 <- raster::crop(nc_brick, raster::extent(mask))
r3 <- raster::mask(r2, mask = mask)
}else{
r3 = nc_brick
}
t = raster::rasterToPoints(r3)
tt = t(t)
coords = t(tt[c(1,2),])
tt = tt[-c(1,2),]
dates = rownames(tt)
temp_dates = gsub("X",replacement = "",x=dates)
funs = c(ymd, ydm, mdy, myd, dmy, dym,
ymd_h, dmy_h, mdy_h, ydm_h,
ymd_hm, dmy_hm, mdy_hm, ydm_hm,
ymd_hms, dmy_hms, mdy_hms, ydm_hms)
for (tfun in funs){
param_list = list(data = temp_dates)
param_list$tz = 'UTC'
dates = tryCatch({do.call(tfun,param_list)},
warning = function(w) {})
if (!is.null(dates)){
break
}
}
ncdf_xts = xts(x = tt,order.by = dates)
list_out = list(raster = r3, ncdf_xts = ncdf_xts, dates = dates, coordinates = coords)
data = list_out$raster
data_raster = list_out$raster
annual_data = period_apply_nc(data_raster, period = "years", FUN = "sum")
annual_plot = nc_ggplot(annual_data,title = TRUE,viridis.option = "turbo",
legend.title = "Annual Precipitation (mm)", common.legend = TRUE, legend = "bottom")
annual_plot
shapefile = "C:/Users/gapou/Downloads/world-administrative-boundaries/world-administrative-boundaries.shp"
nc_brick = raster::brick(filename, varname = varname, level = 1)
mask = rester::shapefile(shapefile)
mask = raster::shapefile(shapefile)
r2 <- raster::crop(nc_brick, raster::extent(mask))
r3 <- raster::mask(r2, mask = mask)
t = raster::rasterToPoints(r3)
tt = t(t)
coords = t(tt[c(1,2),])
tt = tt[-c(1,2),]
dates = rownames(tt)
temp_dates = gsub("X",replacement = "",x=dates)
funs = c(ymd, ydm, mdy, myd, dmy, dym,
ymd_h, dmy_h, mdy_h, ydm_h,
ymd_hm, dmy_hm, mdy_hm, ydm_hm,
ymd_hms, dmy_hms, mdy_hms, ydm_hms)
for (tfun in funs){
param_list = list(data = temp_dates)
param_list$tz = 'UTC'
dates = tryCatch({do.call(tfun,param_list)},
warning = function(w) {})
if (!is.null(dates)){
break
}
}
ncdf_xts = xts(x = tt,order.by = dates)
list_out = list(raster = r3, ncdf_xts = ncdf_xts, dates = dates, coordinates = coords)
data_raster = list_out$raster
annual_data = period_apply_nc(data_raster, period = "years", FUN = "sum")
annual_plot = nc_ggplot(annual_data,title = TRUE,viridis.option = "turbo",
legend.title = "Annual Precipitation (mm)", common.legend = TRUE, legend = "bottom")
annual_plot
a=renv::dependencies()
b = unique(a$Package)
b
devtools::document()
View(a)
devtools::document()
devtools::install()
library(anyFit)
library(anyFit)
file_path <- system.file("extdata", "KNMI_Daily.csv", package = "anyFit")
time_zone <- "UTC"
data <- delim2xts(file_path = file_path,
time_zone = "UTC", delim = " ", strict_step = TRUE)
params <- fitlm_expweibull(data[,4], ignore_zeros = TRUE)
data[,4]
x = data[,4]
ignore_zeros = TRUE
zero_threshold = 0.01
# Important: MEANT to be fitted ONLY to NON-NEGATIVE data.
# The potential inlcusion of zeros or NAs to "x" is hanlded by the 2 lines below.
xNZ <- na.omit(coredata(x))
if (ignore_zeros == TRUE){
xNZ <- x[x > zero_threshold,]
xNZ <- na.omit(coredata(xNZ))
}
library(xts)
# Important: MEANT to be fitted ONLY to NON-NEGATIVE data.
# The potential inlcusion of zeros or NAs to "x" is hanlded by the 2 lines below.
xNZ <- na.omit(coredata(x))
if (ignore_zeros == TRUE){
xNZ <- x[x > zero_threshold,]
xNZ <- na.omit(coredata(xNZ))
}
lm=lmom::samlmu(xNZ)
# Implement Step1
parwei=lmom::pelwei(lmom = lm, bound = 0)[2:3]
# Implement Step2
START=c(parwei[1], parwei[2], 1)
fit=lmom::pelq(lmom = lm[1:3], qfunc = qexpweibull, start = START, type = 's')$para
fit=list(scale=as.vector(fit[1]), shape1=as.vector(fit[2]), shape2=as.vector(fit[3]))
GoF <- GOF_tests(x = x, fit = fit, distribution = 'expweibull')
GOF_tests = function(x, fit, distribution){
u_emp <- rank(x, na.last = NA, ties.method = "average")/(length(x)+1)
q_emp <- x
qq_fitted <- do.call(paste0('q',distribution), c(list(p = u_emp), fit))
CM <- CDFt::CramerVonMisesTwoSamples(q_emp, qq_fitted)
KS <- CDFt::KolmogorovSmirnov(q_emp, qq_fitted)
MLE = -sum(log(do.call(paste0('d',distribution),c(list(x = x), fit))))
plotpos<-lmomco::pp(x=x,a=0,sort=FALSE)
theorquantiles = -do.call(paste0('q',distribution), c(list(p = plotpos), fit))
theorquantilessort<-sort(theorquantiles,decreasing=TRUE)[1:10]
samplesort<-sort(x,decreasing=TRUE)[1:10]
MSEquant<-sum((theorquantiles-x)^2)/length(x)
DiffOfMax<-((max(theorquantiles)-max(x))/max(x))*100
MeanDiffOf10Max<-sum(abs(theorquantilessort-samplesort))/10
# AIC = 2*length(fit)-2*sum(log(do.call(paste0('d',distribution),c(list(x = x), fit))))
# BIC = length(fit)*log(length(x))-2*sum(do.call(paste0('d',distribution),c(list(x = x), fit)))
GoF <- list(MLE=MLE, CM = CM, KS = KS,
MSEquant=MSEquant,DiffOfMax=DiffOfMax,MeanDiffOf10Max=MeanDiffOf10Max)
return(GoF)
}
GoF <- GOF_tests(x = x, fit = fit, distribution = 'expweibull')
distribution = 'expweibull'
u_emp <- rank(x, na.last = NA, ties.method = "average")/(length(x)+1)
View(x)
length(x)
rank(x, na.last = NA, ties.method = "average")
u_emp <- rank(coredata(x), na.last = NA, ties.method = "average")/(length(x)+1)
q_emp <- x
qq_fitted <- do.call(paste0('q',distribution), c(list(p = u_emp), fit))
CM <- CDFt::CramerVonMisesTwoSamples(q_emp, qq_fitted)
KS <- CDFt::KolmogorovSmirnov(q_emp, qq_fitted)
MLE = -sum(log(do.call(paste0('d',distribution),c(list(x = x), fit))))
CM <- CDFt::CramerVonMisesTwoSamples(q_emp, qq_fitted)
View(q_emp)
q_emp <- coredata(x)
qq_fitted <- do.call(paste0('q',distribution), c(list(p = u_emp), fit))
CM <- CDFt::CramerVonMisesTwoSamples(q_emp, qq_fitted)
KS <- CDFt::KolmogorovSmirnov(q_emp, qq_fitted)
MLE = -sum(log(do.call(paste0('d',distribution),c(list(x = x), fit))))
plotpos<-lmomco::pp(x=x,a=0,sort=FALSE)
theorquantiles = -do.call(paste0('q',distribution), c(list(p = plotpos), fit))
theorquantilessort<-sort(theorquantiles,decreasing=TRUE)[1:10]
samplesort<-sort(x,decreasing=TRUE)[1:10]
MSEquant<-sum((theorquantiles-x)^2)/length(x)
DiffOfMax<-((max(theorquantiles)-max(x))/max(x))*100
MeanDiffOf10Max<-sum(abs(theorquantilessort-samplesort))/10
GoF <- list(MLE=MLE, CM = CM, KS = KS,
MSEquant=MSEquant,DiffOfMax=DiffOfMax,MeanDiffOf10Max=MeanDiffOf10Max)
remove.packages("anyFit")
devtools::document()
devtools::document()
devtools::install()
library(anyFit)
file_path <- system.file("extdata", "KNMI_Daily.csv", package = "anyFit")
time_zone <- "UTC"
data <- delim2xts(file_path = file_path,
time_zone = "UTC", delim = " ", strict_step = TRUE)
params <- fitlm_expweibull(data[,4], ignore_zeros = TRUE)
params$Param
params$GoF
fit_check <- fit_diagnostics(data[,4], dist = 'expweibull',
params = params$Param, ignore_zeros = TRUE)
fit_check$Diagnostic_Plots
candidates <- list('exp','expweibull', 'gamma3')
fits <- fitlm_multi(data['2010',4],candidates = candidates, ignore_zeros = TRUE)
fits$diagnostics
ts_lmoms <- lmom_stats(data, ignore_zeros = TRUE)
lcheck <- LRatio_check(ts_lmoms)
lcheck$multi_plots
candidates <- list('exp','weibull', 'gamma3')
monthly_fits <- fitlm_monthly(smonthly_ts,candidates = candidates, ignore_zeros = TRUE)
agg_ts <- aggregate_xts(ts = data[,4], periods = c("months","quarters","years"), FUN = 'sum')
smonthly_ts <- agg_ts$list_months$aggregated
agg_ts$Combined_Plot
monthly_fits <- fitlm_monthly(smonthly_ts,candidates = candidates, ignore_zeros = TRUE)
monthly_fits$monthly_QQplot
source("~/.active-rstudio-document", echo=TRUE)
devtools::load_all()
data <- delim2xts(file_path = file_path,
time_zone = "UTC", delim = " ", strict_step = TRUE)
ts = data$Xall
pstart = "2005"
pend = "2010"
plot_period <- paste(start_date,end_date,sep = '/')
ts_plot <- ts[plot_period]
if (!is.na(pstart)){start_date <- pstart}else{start_date <- index(ts)[1]}
if (!is.na(pend)){end_date <- pend}else{end_date <- index(ts)[nrow(ts)]}
plot_period <- paste(start_date,end_date,sep = '/')
ts_plot <- ts[plot_period]
data_min <- apply(ts_plot, 2, FUN = min, na.rm = TRUE)
data_max <- apply(ts_plot, 2, FUN = max, na.rm = TRUE)
plot_rawts <- autoplot.zoo(ts_plot) + ggtitle('Raw Timeseries')
ts_df <- data.frame(x=coredata(ts))
zero_threshold = 0.01
ignore_zeros = TRUE
if (ignore_zeros == TRUE){ ts_df <- as.data.frame(ts_df[ts_df > zero_threshold,])}
names(ts_df) <- 'X'
ggplot(ts_df , aes(x=X)) +
geom_histogram(aes(y=..density..), bins = nbins,     # Histogram with density instead of count on y-axis
colour='black', fill='white') +
geom_density(alpha=.2, fill='#FF6666') + # Overlay with transparent density plot
labs(x = colnames(ts), y = 'Density') + ggtitle('PDF')
nbins = 30
xpos_label = 0.1
ypos_label = 0.95
ypos_table = 0.15
xpos_table = 0.1
ggplot(ts_df , aes(x=X)) +
geom_histogram(aes(y=..density..), bins = nbins,     # Histogram with density instead of count on y-axis
colour='black', fill='white') +
geom_density(alpha=.2, fill='#FF6666') + # Overlay with transparent density plot
labs(x = colnames(ts), y = 'Density') + ggtitle('PDF')
ggplot(ts_df , aes(x=X)) +
geom_histogram(aes(y=after_stat(density)), bins = nbins,     # Histogram with density instead of count on y-axis
colour='black', fill='white') +
geom_density(alpha=.2, fill='#FF6666') + # Overlay with transparent density plot
labs(x = colnames(ts), y = 'Density') + ggtitle('PDF')
plot_hist <- ggplot(ts_df , aes(x=X)) +
geom_histogram(aes(y=after_stat(density)), bins = nbins,     # Histogram with density instead of count on y-axis
colour='black', fill='white') +
geom_density(alpha=.2, fill='#FF6666') + # Overlay with transparent density plot
labs(x = colnames(ts), y = 'Density') + ggtitle('PDF')
plot_ecdf <- ggplot(ts_df, aes(X)) + stat_ecdf(geom = 'step') + scale_y_continuous(trans = 'log10', breaks = trans_breaks('log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))) +
labs(x = colnames(ts), y = 'P(X<x)') + ggtitle('ECDF')
ts_clean <- ts[!is.na(ts),]
if (ignore_zeros == TRUE){ts_clean <- ts_clean[which(ts_clean > zero_threshold),]}
acf_dirty <- stats::acf(ts_clean, lag.max = 10, plot = FALSE)
acf2df <- data.frame(ACF=acf_dirty$acf, Lag = seq(from = 0, to = 10))
plot_acf <- ggplot(acf2df, aes(x = Lag, y = ACF)) + geom_point() + geom_line() + ggtitle('ACF') #+ ylab(expression(rho_{t,t-1}))
combi_plot <- ggpubr::ggarrange(ggpubr::ggarrange(plot_rawts,plot_hist, widths = c(1.5,1), ncol = 2),
ggpubr::ggarrange(plot_ecdf,plot_acf, ncol = 2), nrow = 2)
combi_plot
(plot_rawts + plot_hist +  plot_layout(widths = c(1.5, 1)))/(plot_ecdf + plot_acf)
library(patchwork)
(plot_rawts + plot_hist +  plot_layout(widths = c(1.5, 1)))/(plot_ecdf + plot_acf)
combi_plot <- (plot_rawts + plot_hist +  plot_layout(widths = c(1.5, 1)))/(plot_ecdf + plot_acf)
combi_plot + theme_bw()
combi_plot & theme_bw()
devtools::document()
remove.packages("anyFit")
devtools::install()
usethis::use_tidy_description()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
install.packages("miniCRAN")
devtools::document()
devtools::install()
remove.packages("anyFit")
devtools::document()
devtools::install()
file_path <- system.file("extdata", "KNMI_Daily.csv", package = "anyFit")
time_zone <- "UTC"
data <- delim2xts(file_path = file_path,
time_zone = "UTC", delim = " ", strict_step = TRUE)
devtools::load_all()
data <- delim2xts(file_path = file_path,
time_zone = "UTC", delim = " ", strict_step = TRUE)
x = data[,1]
x <- na.omit(coredata(x))
PW = 1
zero_threshold = 0.01
NZ=x[x>zero_threshold,]
lm=lmom::samlmu(NZ)[1:4]
pfunction=pdagum
qfunction=qdagum
dfunction = ddagum
switch(method,
knn = {
sample_LM = Lmoments::Lcoefs(NZ, rmax = 4, na.rm = FALSE, trim = c(0, 0))
#I = RANN::nn2(Burr_InitValues[,c('L1','L2','tau3','tau4')],query = sample_LM,k = 10)$nn.idx
init_values = as.data.frame(Dagum_InitValues)
init_values$Lcv = init_values$L2/init_values$L1
target_LMs = data.frame(Lcv = sample_LM[2]/sample_LM[1], tau3 = sample_LM[3], tau4 = sample_LM[4])
I = RANN::nn2(init_values[,c('Lcv','tau3','tau4')],query = target_LMs,k = 50)$nn.idx
start_matrix = init_values[I,c("init_scale","init_shape1","init_shape2")]
for (i in 1:50){
test_value <- tryCatch({
para = pelp(lmom = lm[1:3],
pfunc = pfunction,
start = as.numeric(start_matrix[i,]),
bounds = c(0, Inf),
type = 's')
params = as.list(para$para)
},
warning=function(cond) {
return(params)},
error = function(cond) {
return(NA)
message(cond)})
if (!is.na(test_value[1])){
TheorLmom=lmrp(pfunction, bounds = c(0,Inf),order = c(1:4),
scale=params$scale, shape1=params$shape1, shape2=params$shape2,
subdiv = 10000,acc = 10^-2)
break
}
}
if (is.na(test_value[1])){
stop('Choosing the starting values with knn could not converge to a solution.
DEoptim could prove more succesful.')
}
},
DEoptim = {
itmax = 0
NP = 10*(length(formalArgs(dfunction)) - 1)
for (i in 1:10){
test_value <- tryCatch({
itmax = 40
start = DEoptim::DEoptim(MLE_fun, lower = c(0.001,0.001,0.001), upper = c(40,40,40), x_ts= NZ,
dfunction = dfunction, control=list(itermax=itmax, NP = NP,trace = FALSE,
F = 0.65, parallelType=1))
start = start$optim$bestmem
para = pelp(lmom = lm,
pfunc = pfunction,
start = start,
bounds = c(0, Inf),
type = 's')
params = as.list(para$para)},
warning=function(cond) {
return(para)},
error = function(cond) {
return(NA)
message(cond)})
if (is.na(test_value[1])){
itmax = itmax + 10
NP = NP + 10
}else{
TheorLmom=lmrp(pfunction, bounds = c(0, Inf), order = c(1:3),
scale=params$scale, shape1=params$shape1, shape2=params$shape2,
subdiv = 10000,acc = 10^-2)
if (abs((lm[1]-TheorLmom[1])/lm[1])>0.1){
itmax = itmax + 10
NP = NP + 10
}else{
para = test_value
break
}
}
}
}
)
method = 'knn'
sample_LM = Lmoments::Lcoefs(NZ, rmax = 4, na.rm = FALSE, trim = c(0, 0))
#I = RANN::nn2(Burr_InitValues[,c('L1','L2','tau3','tau4')],query = sample_LM,k = 10)$nn.idx
init_values = as.data.frame(Dagum_InitValues)
init_values$Lcv = init_values$L2/init_values$L1
target_LMs = data.frame(Lcv = sample_LM[2]/sample_LM[1], tau3 = sample_LM[3], tau4 = sample_LM[4])
I = RANN::nn2(init_values[,c('Lcv','tau3','tau4')],query = target_LMs,k = 50)$nn.idx
start_matrix = init_values[I,c("init_scale","init_shape1","init_shape2")]
for (i in 1:50){
test_value <- tryCatch({
para = pelp(lmom = lm[1:3],
pfunc = pfunction,
start = as.numeric(start_matrix[i,]),
bounds = c(0, Inf),
type = 's')
params = as.list(para$para)
},
warning=function(cond) {
return(params)},
error = function(cond) {
return(NA)
message(cond)})
if (!is.na(test_value[1])){
TheorLmom=lmrp(pfunction, bounds = c(0,Inf),order = c(1:4),
scale=params$scale, shape1=params$shape1, shape2=params$shape2,
subdiv = 10000,acc = 10^-2)
break
}
}
TheorLmom=lmrp(pfunction, bounds = c(0, Inf), order = c(1:4),
scale=params$scale, shape1=params$shape1, shape2=params$shape2,
subdiv = 10000,acc = 10^-2)
GoF <- GOF_tests(x = NZ, fit = params, distribution = 'dagum')
Res<-list()
Res$Distribution<-list(FXs="qdagum")
Res$Param<-params
Res$TheorLMom<-TheorLmom
Res$DataLMom<-lm
Res$GoF<-GoF
a = fitlm_dagum(data[,1], ignore_zeros = TRUE)
candidates <- list('exp','expweibull', 'gamma3', 'burr')
fits <- fitlm_multi(data[,1],candidates = candidates, ignore_zeros = TRUE)
candidates <- list('exp','expweibull', 'gamma3', 'dagum')
fits <- fitlm_multi(data[,1],candidates = candidates, ignore_zeros = TRUE)
candidates <- list('exp','expweibull', 'gamma3', 'dagum','dagum')
fits <- fitlm_multi(data[,1],candidates = candidates, ignore_zeros = TRUE)
candidates <- list('exp','expweibull', 'gamma3', 'dagum','dagum', 'gengamma')
fits <- fitlm_multi(data[,1],candidates = candidates, ignore_zeros = TRUE)
fits$diagnostics
candidates <- list('exp','expweibull', 'gamma3', 'dagum','burr')
fits <- fitlm_multi(data[,1],candidates = candidates, ignore_zeros = TRUE)
fits$diagnostics
devtools::document()
remove.packages("anyFit")
remove.packages("anyFit")
devtools::install()
?anyFit::nc_ggplot
ls("package:anyFit")
ls("anyFit")
library(anyFit)
ls("package:anyFit")
remove.packages(anyFit)
remove.packages('anyFit')
devtools::install()
devtools::install_git("git@github.com:Gapouliasis/anyFit.git")
library(anyFit)
devtools::install()
devtools::install()
GG_InitValues <- readRDS("~/anyFit_Paper/GG_InitValues.RDS")
Dagum_InitValues <- readRDS("~/anyFit_Paper/Dagum_InitValues.RDS")
Burr_InitValues <- readRDS("~/anyFit_Paper/Burr_InitValues.RDS")
usethis::use_data(Burr_InitValues, Dagum_InitValues, GG_InitValues)
usethis::use_data(Burr_InitValues, Dagum_InitValues, GG_InitValues, overwrite = TRUE)
devtools::document()
devtools::load_all()
